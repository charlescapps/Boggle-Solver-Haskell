module DoQuickChecks where

--Do QuickChecks on a random sample of boards of sizes 4x4...20x20
--Random start positions (ixes)
--Output valid moves only
--testRandomGoodPlays :: BogHashTable -> Int -> IO ()
--testRandomGoodPlays ht n = 
--    do randGamesIxes <- sample' (arbitrary::Gen GameIndex)
--       let games = map getGame randGamesIxes
--       let ixes = map getIxes randGamesIxes
--       let results = zipWith (\g ix -> getGoodPlaysAt ht g ix n) games ixes
--       let showGames = map (putStrLn . show) games
--       let showResults = map (putStrLn . showPlays) results
--       let showAll = mixLists showGames showResults
--       executeList showAll
--
----Output valid moves and bogus moves from random quickChecks. 
--testRandomAll :: BogHashTable -> Int -> IO ()
--testRandomAll ht n = 
--    do randGamesIxes <- sample' (arbitrary::Gen GameIndex)
--       let games = map getGame randGamesIxes
--       let ixes = map getIxes randGamesIxes
--       let goodPlays = zipWith (\g ix -> getGoodPlaysAt ht g ix n) games ixes
--       let allPlays = zipWith (\g ix -> getAllPlaysAt g ix n) games ixes
--       let showGames = map (putStrLn . show) games
--       let showGoodPlays = map (putStrLn . ("GOOD PLAYS:\n" ++ ) . showPlays) goodPlays
--       let showAllPlays = map (putStrLn . ("ALL PLAYS:\n" ++ ) . showPlays) allPlays
--       let showAll = mixLists3 showGames showGoodPlays showAllPlays
--       executeList showAll
